generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id       Int    @id @default(autoincrement())
  fullName String
  email    String @unique
  password String

  verified DateTime

  orders Order[]

  provider   String?
  providerId String?

  role UserRole @default(USER)

  verificaitonCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart?
}

model Product {
  id       Int    @id @default(autoincrement())
  name     String
  imageUrl String

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  category     Category      @relation(fields: [categoryId], references: [id])
  categoryId   Int
  ingredients  Ingredient[]
  productItems ProductItem[]
}

model ProductItem {
  id        Int        @id @default(autoincrement())
  price     Float
  size      Int?
  pizzaType Int?
  product   Product    @relation(fields: [productId], references: [id])
  productId Int
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?   @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Ingredient {
  id       Int    @id @default(autoincrement())
  name     String
  imageUrl String
  price    Float

  products Product[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
}

model Cart {
  id          Int    @id @default(autoincrement())
  user        User?  @relation(fields: [userId], references: [id])
  userId      Int?   @unique
  totalAmount Float
  token       String

  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id            Int         @id @default(autoincrement())
  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  quantity Int

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id     Int   @id @default(autoincrement())
  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  token       String
  totalAmount Float
  status      OrderStatus
  paymentId   String?

  items Json

  fullName String
  address  String
  phone    String
  email    String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  code      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([code, userId])
}

enum OrderStatus {
  PENDING
  SUCCEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
